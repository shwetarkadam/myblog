<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>programming on Codeklutz</title>
    <link>https://codeklutz.com/tags/programming/</link>
    <description>Recent content in programming on Codeklutz</description>
    <image>
      <url>https://codeklutz.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://codeklutz.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Jul 2021 23:28:00 +0530</lastBuildDate><atom:link href="https://codeklutz.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polymorphism in Java</title>
      <link>https://codeklutz.com/posts/polymorphism-in-java/</link>
      <pubDate>Wed, 14 Jul 2021 23:28:00 +0530</pubDate>
      
      <guid>https://codeklutz.com/posts/polymorphism-in-java/</guid>
      <description>Just revisiting and explaining myself Polymorphism concept here through a blog post. The words Polymorphism means multiple forms.
In Java ,Polymorphism means multiple forms of an object. We shall divide this article into 3 sections.
1.Syntax
2.Calling a variable polymorphically.
3.Calling a method polymorphically.
1.SyntaxPermalink Now in polymorphism in Java, the thumb key rule to remember is
super = subPermalink Meaning the variable reference (LHS) must always be a super class reference and the object initialization(RHS) must a sub class.</description>
      <content:encoded><![CDATA[<p>Just revisiting and explaining myself Polymorphism concept here through a blog post. The words Polymorphism means multiple forms.</p>
<p>In Java ,Polymorphism means multiple forms of an object. We shall divide this article into 3 sections.</p>
<p>1.Syntax</p>
<p>2.Calling a variable polymorphically.</p>
<p>3.Calling a method polymorphically.</p>
<p>1.SyntaxPermalink
Now in polymorphism in Java, the thumb key rule to remember is</p>
<p>super = subPermalink
Meaning the variable reference (LHS) must always be a super class reference and the object initialization(RHS) must a sub class.</p>
<p>For Example: class A{</p>
<p>} class B extends A{ }
class C extends B{ }
class D extends A{ }</p>
<p>So valid and invalid syntax according to the thumb rule will be</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">A</span> <span class="n">a</span> <span class="o">=</span><span class="k">new</span> <span class="n">B</span><span class="o">();</span>           <span class="c1">//VALID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">B</span> <span class="n">b</span><span class="o">=</span><span class="k">new</span> <span class="n">D</span><span class="o">();</span>            <span class="c1">//NOT VALID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">C</span> <span class="n">c</span><span class="o">=</span><span class="k">new</span> <span class="n">A</span><span class="o">();</span>           <span class="c1">//VALID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">A</span> <span class="n">a1</span><span class="o">=</span><span class="k">new</span> <span class="n">D</span><span class="o">();</span>           <span class="c1">//VALID
</span></span></span></code></pre></div><p>2.Calling a variable polymorphically.Permalink
If a variable is called from a polymorphic object,we follow the reference i.e. the super class. And if the variable is not present in the super class ,it results in a COMPILE ERROR. EG:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">App</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="n">B</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">x</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//What do u think is the output class A x value (5)or class B x value(10)?Follow the rule.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nl">OUTPUT:</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span>
</span></span></code></pre></div><p>Calling a method polymorphically.Permalink
If a method is called from a polymorphic object ,we follow a 2 step procedure: 1.We got to the super class and check whther the method is present or not.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span><span class="o">(</span>present<span class="o">)</span>
</span></span><span class="line"><span class="cl"> Goto to step <span class="m">2</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"> COMPILE ERROR
</span></span></code></pre></div><p>2.Come to the sub class and check wther the method is overrided or not.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span><span class="o">(</span>overrided<span class="o">)</span>
</span></span><span class="line"><span class="cl"> Call the sub-class version
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"> Call the super -class version.
</span></span></code></pre></div><p>Eg:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">m1</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">m1</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">App</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="n">B</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="o">.</span><span class="na">m1</span><span class="o">();</span>          <span class="c1">//Follow the rule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">B</span><span class="o">=</span><span class="k">new</span> <span class="n">B</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">.</span><span class="na">m1</span><span class="o">();</span>          <span class="c1">//Normal sub class object method call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="nl">OUTPUT:</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span>
</span></span></code></pre></div><p>So that’s all for polymorphism in java.</p>
<p>Happy Learning :)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How constructors work in Java</title>
      <link>https://codeklutz.com/posts/how-constructors-work-in-java/</link>
      <pubDate>Mon, 14 Jun 2021 21:41:00 +0530</pubDate>
      
      <guid>https://codeklutz.com/posts/how-constructors-work-in-java/</guid>
      <description>Constructors are used every time to initialize instance variables. There are some additional rules associated with constructors that are often asked in interviews.Hence revising those here through a blog post.
A constructor is used to initialize instance variables When an object of an class is created,JVM goes to the class and searches for that matching constructor.If Constructor is NOT PRESENT it gives a compile error. By default every class has a constructor called default no argument constructor.</description>
      <content:encoded><![CDATA[<p>Constructors are used every time to initialize instance variables. There are some additional rules associated with constructors that are often asked in interviews.Hence revising those here through a blog post.</p>
<h2 id="a-constructor-is-used-to-initialize-instance-variables">A constructor is used to initialize instance variables</h2>
<h2 id="when-an-object-of-an-class-is-created-jvm-goes-to-the-class-and-searches-for-that-matching-constructor-dot-if-constructor-is-not-present-it-gives-a-compile-error-dot">When an object of an class is created,JVM goes to the class and searches for that matching constructor.If Constructor is NOT PRESENT it gives a compile error.</h2>
<h2 id="by-default-every-class-has-a-constructor-called-default-no-argument-constructor-dot">By default every class has a constructor called default no argument constructor.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(){</span> <span class="c1">//default no arg constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}}</span>
</span></span></code></pre></div><h2 id="a-programmer-can-have-multiple-constructors-in-a-class-provided-their-signatures-are-different-this-is-called-constructor-overloading-dot">A programmer can have multiple constructors in a class provided their signatures are different this is called constructor overloading.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//some code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//some code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//some code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span><span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//some code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="kt">float</span> <span class="n">y</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">int</span> <span class="n">z</span><span class="o">){}</span><span class="c1">//THIS WILL GIVE COMPILE ERROR SInce its already defined on top.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="n">A</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="n">A</span><span class="o">();</span><span class="c1">//goes to first matching constructor
</span></span></span></code></pre></div><h2 id="jvm-always-calls-the-matching-constructor-from-the-class-dot-however-a-programmer-can-call-other-constructors-of-this-class-by-using-the-the-this-method-dot">JVM always calls the matching constructor from the class.HOWEVER,a programmer can call other constructors of this class by using the the this() method.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>    <span class="c1">//I
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">A</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">();</span>                     <span class="c1">//this will go to constructor A();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AA&#34;</span><span class="o">);</span>   <span class="c1">//II
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">App</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="n">A</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}}</span>
</span></span><span class="line"><span class="cl"><span class="nl">
</span></span></span><span class="line"><span class="cl"><span class="nl">OUTPUT:</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span>
</span></span><span class="line"><span class="cl"><span class="n">AA</span>
</span></span></code></pre></div><h2 id="if-a-programmer-desires-it-can-call-the-constructor-of-the-super-class-as-well-from-its-own-constructor-using-the-super-method-dot">If a programmer desires it can call the constructor of the super class as well from its own constructor using the super() method.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>    <span class="c1">//I
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="kd">super</span><span class="o">();</span>             <span class="c1">//this is called implicitly refer next point also
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">B</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nl">OUTPUT:</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span>
</span></span></code></pre></div><h2 id="whenever-a-programmer-creates-a-constructor-jvm-writes-super-in-every-constructor-implicitly-as-its-first-line-dot">Whenever a programmer creates a constructor ,JVM writes super() in every constructor implicitly as its first line.</h2>
<p>Note:If a class does not extend any class it by default extends the Object class. Do Try this code in your ide to see it for yourself</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//super will be called implicitly at the first line of this constructor and here since it does not extend any class it will extend the Object class
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">);</span>    <span class="c1">//I
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">A</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="c1">//super will be called implicitly at the first line of this constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AA&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">A</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nl">OUTPUT:</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span>
</span></span><span class="line"><span class="cl"><span class="n">AA</span>
</span></span></code></pre></div><p>That’s all for constructors in Java.</p>
<p>Happy Learning :)</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
