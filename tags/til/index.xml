<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>til on Codeklutz</title>
    <link>https://codeklutz.com/tags/til/</link>
    <description>Recent content in til on Codeklutz</description>
    <image>
      <url>https://codeklutz.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://codeklutz.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://codeklutz.com/tags/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Today I learnt : How to check if a url is on 2 way SSL or not ?</title>
      <link>https://codeklutz.com/posts/today-i-learnt-how-to-check-if-a-url-is-on-2-way-ssl-or-not/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-how-to-check-if-a-url-is-on-2-way-ssl-or-not/</guid>
      <description>Learning SSL itself is not a straight forward concept as it seems but even confirming if a particular url is on 2 way ssl requires some effort. I face some trouble with ssl in the past so just a blog post describing my pain.
1 way ssl Client -&amp;gt; Server When a client (browser) hits the url and it gives success for example Google.com.It is usually on 1 way ssl. In this case, only the client authenticates the server.</description>
      <content:encoded><![CDATA[<p>Learning SSL itself is not a straight forward concept as it seems but even confirming if a particular url is on 2 way ssl requires some effort. I face some trouble with ssl in the past so just a blog post describing my pain.</p>
<h2 id="1-way-ssl-client-server">1 way ssl Client -&gt; Server</h2>
<p>When a client (browser) hits the url and it gives success for example Google.com.It is usually on 1 way ssl.
In this case, only the client authenticates the server.</p>
<blockquote>
<p>If an API call(curl/postman) succeeds without passing any certificate, it&rsquo;s on 1-way ssl.</p>
</blockquote>
<p>So the situations might look like :</p>
<h3 id="if-one-makes-a-curl-call-and-it-succeeds-without-passing-any-client-cert-with-flags-such-as-key-and-cert-dot-then-it-is-on-1-way-ssl-dot">If one makes a curl call  and it succeeds without passing any client cert with flags such as &ndash;key and &ndash;cert. then it is on 1-way SSL.</h3>
<h3 id="if-the-postman-api-call-succeeds-without-passing-any-client-certificate-in-postman--preferences-certificates-tab-client-certificate-tab--with-enable-ssl-certificate-verification-toggled-on-it-is-on-1-way-ssl-dot">If the Postman API call succeeds without passing any client certificate in Postman (Preferences -&gt; Certificates tab -&gt; Client certificate tab) with Enable SSL certificate verification toggled on, it is on 1-way SSL.</h3>
<p>The curl output of 1 way SSL looks like this.(Data has been changed and added fake data for DEMO Purposes):</p>
<p>#+begin_src bash
❯ curl -v <a href="https://exampleof1wayyssl.com">https://exampleof1wayyssl.com</a>
Trying 82.133.101.34&hellip;</p>
<ul>
<li>TCP_NODELAY set</li>
<li>Connected to  exampleOf1wayySSL.com (10.10.10.10.10) port 443 (#0)</li>
<li>ALPN, offering h2</li>
<li>ALPN, offering http/1.1</li>
<li>successfully set certificate verify locations:</li>
<li>  CAfile: /etc/ssl/cert.pem</li>
</ul>
<p>  CApath: none</p>
<ul>
<li>TLSv1.2 (OUT), TLS handshake, Client hello (1):</li>
<li>TLSv1.2 (IN), TLS handshake, Server hello (2):</li>
<li>TLSv1.2 (IN), TLS handshake, Certificate (11):</li>
<li>TLSv1.2 (IN), TLS handshake, Server key exchange (12):</li>
<li>TLSv1.2 (IN), TLS handshake, Server finished (14):</li>
<li>TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</li>
<li>TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):</li>
<li>TLSv1.2 (OUT), TLS handshake, Finished (20):</li>
<li>TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):</li>
<li>TLSv1.2 (IN), TLS handshake, Finished (20):</li>
<li>SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256</li>
<li>ALPN, server did not agree to a protocol</li>
<li>Server certificate:</li>
<li> subject: C=RANDOM; L=RANDOM; O=EXAMPLE. OHG; CN=*exampleof1wayssl</li>
<li> start date: Feb 11 00:00:00 2012 GMT</li>
<li> expire date: Mar  8 23:59:59 2024 GMT</li>
<li> subjectAltName: host &ldquo;exampleOf1wayssl.com&rdquo; matched cert&rsquo;s &ldquo;*.exampleof1wayssl&rdquo;</li>
<li> issuer: C=US; O=DigiCert Inc; CN=DigiCert TLS RSA SHA256 2020 CA1</li>
<li> SSL certificate verify ok.</li>
</ul>
<p>&gt; GET / HTTP/1.1
&gt; Host:  exampleOf1wayySSL.com
&gt; User-Agent: curl/7.64.1
&gt; Accept: /
&gt;
#+end_src bash</p>
<p>In this example as you can see only the client asked for the certificate with line <code>TLSv1.2 (IN), TLS handshake, Certificate (11):</code></p>
<h2 id="2-way-ssl--client-server">2 way SSL (Client &lt;-&gt; Server)</h2>
<p>In 2 way ssl Both client and server ask for the certificate during SSL validation.So while validating the scenarios should look like this:</p>
<h3 id="curl-fails-without-passing-any-client-cert-dot">curl fails without passing any client cert.</h3>
<p>When one makes a CURL call to API/Endpoint (curl -v -k &lt;baseURL/endpoint&gt;) without passing flags such as <code>--key</code> and <code>--cert</code>, the curl call should fail with a handshake failure.
From the response, make a note of the line with <code>Request CERT</code> (example below)
So if a curl call succeeds without passing any flags, then it&rsquo;s not on 2 way SSL.</p>
<p>For a 2-way SSL, the server would ask for a client certificate. <code>(TLSv1.2 (IN), TLS handshake, Request CERT (13)</code> in this case, example in code block below</p>
<p>In this example, we didn&rsquo;t pass any certificate in curl with flags such as <code>--key</code> and <code>--cert</code>, and hence it resulted in handshake failure below <code>* error:1401E410:SSL routines:CONNECT_CR_FINISHED:sslv3 alert handshake failure</code></p>
<p>#+begin_src bash
curl -v -k <a href="https://2waysslexample.com">https://2waysslexample.com</a></p>
<ul>
<li>  Trying 82.133.101.34..</li>
<li>TCP_NODELAY set</li>
<li>Connected to 2WaySSLExample.com (82.133.101.34) port 443 (#0)</li>
<li>ALPN, offering h2</li>
<li>ALPN, offering http/1.1</li>
<li>successfully set certificate verify locations:</li>
<li>  CAfile: /etc/ssl/cert.pem</li>
</ul>
<p>  CApath: none</p>
<ul>
<li>TLSv1.2 (OUT), TLS handshake, Client hello (1):</li>
<li>TLSv1.2 (IN), TLS handshake, Server hello (2):</li>
<li>TLSv1.2 (IN), TLS handshake, Certificate (11):</li>
<li>TLSv1.2 (IN), TLS handshake, Request CERT (13):</li>
<li>TLSv1.2 (IN), TLS handshake, Server finished (14):</li>
<li>TLSv1.2 (OUT), TLS handshake, Certificate (11):</li>
<li>TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</li>
<li>TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):</li>
<li>TLSv1.2 (OUT), TLS handshake, Finished (20):</li>
<li>TLSv1.2 (IN), TLS alert, handshake failure (552):</li>
<li>error:1401E410:SSL routines:CONNECT_CR_FINISHED:sslv3 alert handshake failure</li>
<li>Closing connection 0</li>
</ul>
<p>#+end_src bash</p>
<p><strong><!-- raw HTML omitted -->The server would ask for a client certificate in this case<!-- raw HTML omitted --></strong></p>
<p>In some unusual cases; it&rsquo;s possible a server doesn&rsquo;t directly ask for it but the client needs to send it or gets rejected. The standard is: the server asks for it.</p>
<h3 id="curl-fails-without-passing-any-client-cert--nss-is-used">curl fails without passing any client cert(NSS is used)</h3>
<p>Similar to <code>/etc/ssl/cert.pem</code>, NSS(Network Security Services) as a trusted CA certificate location. Another example of trusted CA cert location is jdk cacerts for java applications.</p>
<p>All three <code>/etc/ssl/cert.pem</code>, <code>NSS</code>, and <code>JDK cacerts</code> are used to store trusted root certificates but differ in their implementation and usage.
So while using curl output of ssl handshake failure might look like this :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -v https://2WaySSLExampleUsingNSS.com
</span></span><span class="line"><span class="cl"> * About to connect<span class="o">()</span> to 2WaySSLExampleUsingNSS.com port <span class="m">443</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl"> * Trying 82.133.101.34.....
</span></span><span class="line"><span class="cl"> * Connected to 2WaySSLExampleUsingNSS.com <span class="o">(</span>82.133.101.34<span class="o">)</span> port <span class="m">443</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl"> * Initializing NSS with certpath: sql:/etc/pki/nssdb
</span></span><span class="line"><span class="cl"> * CAfile: /etc/pki/tls/certs/ca-bundle.crt
</span></span><span class="line"><span class="cl"> CApath: none
</span></span><span class="line"><span class="cl"> * NSS: client certificate not found <span class="o">(</span>nickname not specified<span class="o">)</span>
</span></span><span class="line"><span class="cl"> * NSS error -12227 <span class="o">(</span>SSL_ERROR_HANDSHAKE_FAILURE_ALERT<span class="o">)</span>
</span></span><span class="line"><span class="cl"> * SSL peer was unable to negotiate an acceptable <span class="nb">set</span> of security parameters.
</span></span><span class="line"><span class="cl"> * Closing connection <span class="m">0</span>
</span></span><span class="line"><span class="cl">curl: <span class="o">(</span>35<span class="o">)</span> NSS: client certificate not found <span class="o">(</span>nickname not specified
</span></span></code></pre></div><p>Make note of <code>curl: (35) NSS: client certificate not found (nickname not specified)</code> where we are not passing any client cert or key and get the expected error.
curl -v &lt;url&gt; &ndash;cacert ca.crt &ndash;key private.key  &ndash;cert client.cer</p>
<h3 id="happy-curl-case-where-we-pass-the-client-cert-and-key">Happy curl case where we pass the client cert and key</h3>
<p>The happy case of a curl call where we pass client cert and key would look like this <code>curl -v &lt;url&gt; --cacert ca.crt --key private.key  --cert client.cer</code></p>
<p>#+begin_src bash
$ curl -v <a href="https://happycurlcase.com">https://happycurlcase.com</a> &ndash;key ./myKey.key &ndash;cert ./myCert-cert.crt</p>
<ul>
<li>About to connect() toHappyCurlCase.com  port 443 (#0)</li>
<li>Trying 82.133.101.34&hellip;..</li>
<li>Connected to HappyCurlCase.com ( 82.133.101.34) port 443 (#0)</li>
<li>Initializing NSS with certpath: sql:/etc/pki/nssdb</li>
<li>CAfile: /etc/pki/tls/certs/ca-bundle.crt
CApath: none</li>
<li>NSS: client certificate from file</li>
<li>subject: E=&lt;SOME_ISSUER&gt; ,CN=&lt;SOME_CN&gt;,OU=&lt;SOME_OU&gt;&gt;,O=&lt;SOME_RANDOM_VALUE&gt;_</li>
<li>start date: Mar 24 13:31:56 2026 GMT</li>
<li>expire date: Mar 31 23:59:59 2029 GMT</li>
<li>common name: &lt;some_common_name&gt;</li>
</ul>
<p>issuer:E=&lt;SOME_ISSUER&gt; ,CN=&lt;SOME_CN&gt;,OU=&lt;SOME_OU&gt;&gt;,O=&lt;SOME_RANDOM_VALUE&gt;_</p>
<ul>
<li>SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li>
<li>Server certificate:</li>
<li>subject: CN=&lt;some_common_name&gt;,O=&lt;some_organization&gt;</li>
<li>start date: Mar 24 13:31:56 2026 GMT</li>
<li>expire date: Mar 31 23:59:59 2029 GMT</li>
<li>common name: &lt;some_common_name&gt;</li>
<li>issuer: CN=DigiCert Global G1 TLS RSA SHA256 2020 CA1,O=DigiCert Inc,C=US</li>
</ul>
<p>&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.29.0
&gt; Host: HappyCurlCase.com
&gt; Accept: /
&gt;
&lt; HTTP/1.1 404 Not Found
&lt; Content-Type: application/json; charset=utf-8
&lt; Date: Tue, 28 Mar 2023 14:36:34 GMT
&lt; Connection: keep-alive
&lt; Keep-Alive: timeout=5
&lt; Content-Length: 41
&lt;
#+end_src bash</p>
<h3 id="verifying-if-client-key-is-being-used-in-authentication">Verifying if Client key is being used in authentication</h3>
<p>Many times I have faced a scenario where the other party claims that they configured 2 way ssl correctly but actually the key is never used in the ssl authentication process.So there are way to figure if its actually being used by looking for certain outputs.</p>
<h4 id="using-openssl-command-dot">Using openssl command.</h4>
<p>When trying to verify via openssl command, <code>openssl s_client -servername someExampleDomain -connect someExampleDomain.com:443</code> ,for a happy case look for <code>Acceptable client certificate CA names</code>
The client (browser or curl) must select the correct client certificate from its keystore location based on the rules below. If this doesn&rsquo;t exist then it won&rsquo;t use the client key.
And this client key is stored any location your application or somewhere else.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl s_client -servername someExampleDomain -connect someExampleDomain.com:443
</span></span><span class="line"><span class="cl">Acceptable client certificate CA names
</span></span><span class="line"><span class="cl"><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl"><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CONNECTED<span class="o">(</span>00000003<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">2</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Certificate chain
</span></span><span class="line"><span class="cl"> <span class="m">0</span> s: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl">   i: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl"> <span class="m">1</span> s: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">   i: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Server certificate
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">MIIFzDCCBLSgAwIBAgIRAKBYEa+5G0pMFMWcTPWdDb8wDQYJKoZIhvcNAQELBQAw
</span></span><span class="line"><span class="cl">gYsxCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1DYWxpZm9ybmlhMRYwFAYDVQQHDA1T
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;...Random Certificate content...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fUeyIkVJ17E4wj1jv7dwD2NW9/Jg2U4vA5s2nRO2fX0CXU1IK1WueBq/AVhUo+3E
</span></span><span class="line"><span class="cl"><span class="nv">cGxfJyzCvujpBT9tpH4twQ</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----
</span></span><span class="line"><span class="cl"><span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl"><span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Acceptable client certificate CA names
</span></span><span class="line"><span class="cl"><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl"><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">---Server Temp Key: ECDH, P-256, <span class="m">256</span> bits
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">SSL handshake has <span class="nb">read</span> <span class="m">2498</span> bytes and written <span class="m">304</span> bytes
</span></span><span class="line"><span class="cl">Verification: OK
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384
</span></span><span class="line"><span class="cl">Server public key is <span class="m">2048</span> bit
</span></span><span class="line"><span class="cl">Secure Renegotiation IS supported
</span></span><span class="line"><span class="cl">Compression: NONE
</span></span><span class="line"><span class="cl">Expansion: NONE
</span></span><span class="line"><span class="cl">No ALPN negotiated
</span></span><span class="line"><span class="cl">Early data was not sent
</span></span><span class="line"><span class="cl">Verify <span class="k">return</span> code: <span class="m">0</span> <span class="o">(</span>ok<span class="o">)</span>
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><p>If you don&rsquo;t see your CA(client&rsquo;s CA) mentioned in the above <code>Acceptable client certificate CA names</code> section then that means the URL is not using the client key for authentication and there might have been misconfiguration.
Another example of a client key not being used during SSL handshake is indicated by <code>No client certificate CA names sent</code>
Example output :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl s_client -servername someExampleDomain -connect someExampleDomain.com:443
</span></span><span class="line"><span class="cl">CONNECTED<span class="o">(</span>00000003<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">2</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Certificate chain
</span></span><span class="line"><span class="cl"> <span class="m">0</span> s: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl">   i: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl"> <span class="m">1</span> s: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">   i: <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Root CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Server certificate
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">MIIFzDCCBLSgAwIBAgIRAKBYEa+5G0pMFMWcTPWdDb8wDQYJKoZIhvcNAQELBQAw
</span></span><span class="line"><span class="cl">gYsxCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1DYWxpZm9ybmlhMRYwFAYDVQQHDA1T
</span></span><span class="line"><span class="cl">YW4gRnJhbmNpc2NvMRMwEQYDVQQKDApFeGFtcGxlIENBMRIwEAYDVQQDDAlleGFt
</span></span><span class="line"><span class="cl">cGxlLmNvbTAeFw0yMTA5MTUwMzQzMjNaFw0yMTA5MTYwMzQzMjNaMEwxCzAJBgNV
</span></span><span class="line"><span class="cl">BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRMwEQYDVQQHEwpTYW4gRnJhbmNp
</span></span><span class="line"><span class="cl">c2NvMRMwEQYDVQQKEwpFeGFtcGxlIEluYy4xEjAQBgNVBAMTCXNvbWVFeGFtcGxl
</span></span><span class="line"><span class="cl">LmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJDEi5WSU95UTq0A
</span></span><span class="line"><span class="cl">LanrVthBLYAmgU7X5D3HFF+T8Ghz9MbYa1Mw/eXxiC0vBo2eM1YyTS2JDLum56KU
</span></span><span class="line"><span class="cl">E3Moc5Vcm8yBtBgU2amKazSxS7VzQsEj5+lzp6f9yyzm32HeMeiTY4W31ehobLkj
</span></span><span class="line"><span class="cl">QYb6ChhQqWd0qXnoy9UoT2Cn1lRfIAYoJy1l2a/8Vt0Zk44MTKm4EGkmzRFm7JCu
</span></span><span class="line"><span class="cl">NyFNU5iR8p9yUmmupzDMDlum3VwsbtmYmLwib9EBK0rAF9DkR9QJcYeeV4bZiQv1
</span></span><span class="line"><span class="cl">wjJthoPQ1sFIZsXdJCTUUK9l25H4xXHmWmpNfn9JlD5vGe
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;...Certificate content...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fUeyIkVJ17E4wj1jv7dwD2NW9/Jg2U4vA5s2nRO2fX0CXU1IK1WueBq/AVhUo+3E
</span></span><span class="line"><span class="cl"><span class="nv">cGxfJyzCvujpBT9tpH4twQ</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----
</span></span><span class="line"><span class="cl"><span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> Example Inc., <span class="nv">CN</span> <span class="o">=</span> someExampleDomain.com
</span></span><span class="line"><span class="cl"><span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Example CA, <span class="nv">CN</span> <span class="o">=</span> Example Intermediate CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">No client certificate CA names sent
</span></span><span class="line"><span class="cl">Server Temp Key: ECDH, P-256, <span class="m">256</span> bits
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">SSL handshake has <span class="nb">read</span> <span class="m">2498</span> bytes and written <span class="m">304</span> bytes
</span></span><span class="line"><span class="cl">Verification: OK
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384
</span></span><span class="line"><span class="cl">Server public key is <span class="m">2048</span> bit
</span></span><span class="line"><span class="cl">Secure Renegotiation IS supported
</span></span><span class="line"><span class="cl">Compression: NONE
</span></span><span class="line"><span class="cl">Expansion: NONE
</span></span><span class="line"><span class="cl">No ALPN negotiated
</span></span><span class="line"><span class="cl">Early data was not sent
</span></span><span class="line"><span class="cl">Verify <span class="k">return</span> code: <span class="m">0</span> <span class="o">(</span>ok<span class="o">)</span>
</span></span></code></pre></div><h4 id="using-java-flags-in-application-logs">Using Java Flags in application logs</h4>
<p>One can also verify the same in Java by checking your application logs and enabling a flag <code>-Djavax.net.debug=ssl</code> or in some cases <code>-Djavax.net.debug=all</code> which gives more verbose logs.
If the client key is not being during ssl handshake, the error log might look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="o">***</span> <span class="n">ServerHelloDone</span>
</span></span><span class="line"><span class="cl"> <span class="o">[</span><span class="n">read</span><span class="o">]</span> <span class="n">MD5</span> <span class="n">and</span> <span class="n">SHA1</span> <span class="n">hashes</span><span class="o">:</span>  <span class="n">len</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mo">0000</span><span class="o">:</span> <span class="mi">0</span><span class="n">Z</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mo">00</span>                                        <span class="o">....</span>
</span></span><span class="line"><span class="cl"> <span class="n">Warning</span><span class="o">:</span> <span class="n">no</span> <span class="n">suitable</span> <span class="n">certificate</span> <span class="n">found</span> <span class="o">-</span> <span class="n">continuing</span> <span class="n">without</span> <span class="n">client</span> <span class="n">authentication</span>
</span></span><span class="line"><span class="cl"> <span class="o">***</span> <span class="n">Certificate</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">Empty</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>During a happy case you should see the chain below ServerHelloDone</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="o">***</span> <span class="n">ServerHelloDone</span>
</span></span><span class="line"><span class="cl"> <span class="o">[</span><span class="n">read</span><span class="o">]</span> <span class="n">MD5</span> <span class="n">and</span> <span class="n">SHA1</span> <span class="n">hashes</span><span class="o">:</span>  <span class="n">len</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mo">0000</span><span class="o">:</span> <span class="mi">0</span><span class="n">Z</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mo">00</span>
</span></span><span class="line"><span class="cl"> <span class="n">matching</span> <span class="n">alias</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">some_random_alias</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="o">***</span> <span class="n">Certificate</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>
</span></span></code></pre></div><p>These were some of the tricks I used to verify.In future blog posts, I will include how to test using Postman too.
Happy Learning!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt : Kubectl commands for debugging</title>
      <link>https://codeklutz.com/posts/today-i-learnt-kubectl-commands-for-debugging/</link>
      <pubDate>Fri, 03 Mar 2023 23:10:00 +0530</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-kubectl-commands-for-debugging/</guid>
      <description>Today I learnt a few kubectl commands which I used to for debugging a few issues in testing environment at work.
To check logs kubectl logs -f pod_name Useful when you need to check logs inside a pod.
To get the bin bash inside a pod kubectl --exec --stdin --tty podname --bin/bash This is useful command to check for certain versions or debugging which is done This command was helpful for determining Java versions inside the pod which was used in a particular environment.</description>
      <content:encoded><![CDATA[<p>Today I learnt a few kubectl commands which I used to for debugging a few issues in testing environment at work.</p>
<h2 id="to-check-logs">To check logs</h2>
<pre tabindex="0"><code class="language-kubectl" data-lang="kubectl">kubectl logs  -f pod_name
</code></pre><p>Useful when you need to check logs inside a pod.</p>
<h2 id="to-get-the-bin-bash-inside-a-pod">To get the bin bash inside a pod</h2>
<pre tabindex="0"><code class="language-kubectl" data-lang="kubectl">kubectl --exec --stdin --tty podname --bin/bash
</code></pre><p>This is useful command to check for certain versions or debugging which is done
This command was helpful for determining Java versions inside the pod which was used in a particular environment.
Anytime you want to run terminal commands such as <code>java --version</code> Or something similar to execute commands which need a bash shell.This is a good approach.
Helps to know which dependencies a pod uses.</p>
<h2 id="scale-up-and-downscale-your-pod">Scale up and downscale your pod</h2>
<pre tabindex="0"><code class="language-kubectl" data-lang="kubectl">kubectl scale deployment &lt;application-name&gt; --replicas=0
kubectl scale deployment &lt;application-name&gt; --replicas=1
</code></pre><p>If your company uses a UI to scale up application pods and that UI tests your patience then this is a quick fix(Not recommended in PROD).</p>
<h2 id="get-description-of-your-pod-dot">Get description of your pod.</h2>
<pre tabindex="0"><code class="language-kubectl" data-lang="kubectl">kubectl describe services
</code></pre><p>This commands gives general information regarding image IDs.
If your company uses Jenkins to make builds and then deploys them uses kubernetes,and if you need a way to verify if Jenkins deployed that particular build.This one helps as you can cross verify that information using attributes such as (sha)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt TIL :GIT Modules &amp; How to effectively remove submodules</title>
      <link>https://codeklutz.com/posts/today-i-learnt-til-git-modules-how-to-effectively-remove-submodules/</link>
      <pubDate>Sun, 01 Jan 2023 00:30:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-til-git-modules-how-to-effectively-remove-submodules/</guid>
      <description>While I migrating this website, I came across many issues. One such issue was git submodule.So here is a post on it.
what is a git submodule? Git submodule is a way to include another repository in Git as a sub directory in one repository.
It allows you to keep another repo(your own repo or someone else) in your repo as a subdirectory It is useful for track that repo&amp;rsquo;s changes and use that project repo as a reference.</description>
      <content:encoded><![CDATA[<p>While I migrating this website, I came across many issues. One such issue was git submodule.So here is a post on it.</p>
<h2 id="what-is-a-git-submodule">what is a git submodule?</h2>
<p>Git submodule is a way to include another repository in Git as a sub directory in one repository.</p>
<p>It allows you to keep another repo(your own repo or someone else) in your repo as a subdirectory
It is useful for track that repo&rsquo;s  changes and use that project repo as a reference.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add https://github.com/username/repo-name.git
</span></span></code></pre></div><p>It’s important to note the <code>username</code> of the repo you are adding.
Because whose username is present in the repo, the repo belongs to them. So they have ownership of the repo and the changes over it.</p>
<h2 id="what-issue-i-faced">What issue I faced ?</h2>
<p>I use Hugo Papermod theme for this website.
I used the git submodule method for installing this theme in my Hugo repo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule https://github.com/adityatelange/hugo-PaperMod.git --depth<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></div><p>Instead of</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule https://github.com/MY-GITHUB-USERNAME/hugo-PaperMod.git --depth<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></div><h2 id="what-did-this-lead-to">What did this lead to?</h2>
<p>For adding  GitHub comments feature, the changes had to be done inside <code>layout/partials/comments.html</code></p>
<p>This file is present in the submodule directory.This lead to the below error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">warning: adding embedded git repository: themes/PaperMod
</span></span><span class="line"><span class="cl">hint: You’ve added another git repository inside your current repository.
</span></span><span class="line"><span class="cl">hint: Clones of the outer repository will not contain the contents of
</span></span><span class="line"><span class="cl">hint: the embedded repository and will not know how to obtain it.
</span></span><span class="line"><span class="cl">hint: If you meant to add a submodule, use:
</span></span><span class="line"><span class="cl">hint:
</span></span><span class="line"><span class="cl">hint:     git submodule add &lt;url&gt; themes/PaperMod
</span></span><span class="line"><span class="cl">hint:
</span></span><span class="line"><span class="cl">hint: If you added this path by mistake, you can remove it from the
</span></span><span class="line"><span class="cl">hint: index with:
</span></span><span class="line"><span class="cl">hint:
</span></span><span class="line"><span class="cl">hint:     git rm --cached themes/PaperMod
</span></span><span class="line"><span class="cl">hint:
</span></span><span class="line"><span class="cl">hint: See “git <span class="nb">help</span> submodule” <span class="k">for</span> more information.
</span></span></code></pre></div><p>I couldn’t push my changes into repo since I did not have ownership over it</p>
<h2 id="how-to-solve-this">How to solve this?</h2>
<p>There were two ways to solve this:-</p>
<ol>
<li>I make a PR of my changes in aditya subdirectory.</li>
</ol>
<p>The owner approves my changes.
This is not possible in this case since these changes are custom to my repo and not feature enhancement or bug fix</p>
<ol>
<li>I remove all git submodule of Aditya ’s changes .Fork Aditya papermod theme(so now the forked repo belong to me ) and link the git submodule to my forked repo.</li>
</ol>
<p>I went with the second route.</p>
<p>But turns out removing all references of git submodule can be quite annoying.</p>
<p>Every time I thought I removed all submodule references using stackoverflow answers I ended up on the same above error.
This meant there were still submodule references present.</p>
<p>Found this useful <a href="https://gist.github.com/myusuf3/7f645819ded92bda6677">Github Gist</a></p>
<ul>
<li>Delete the relevant section from the .gitmodules file. Delete the relevant section from the <code>.gitmodules</code> file.</li>
</ul>
<p>In my case entries looked like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">│ <span class="o">[</span>submodule “themes/PaperMod”<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="m">2</span>   │     <span class="nv">path</span> <span class="o">=</span> themes/PaperMod
</span></span><span class="line"><span class="cl">    <span class="m">3</span>   │     <span class="nv">url</span> <span class="o">=</span> https://github.com/adityatelange/hugo-PaperMod.git
</span></span></code></pre></div><ul>
<li>
<p>Stage the .gitmodules <code>changes git add .gitmodules</code></p>
</li>
<li>
<p>Delete the relevant section from <code>.git/config</code>
For me no submodule entries were present.</p>
</li>
<li>
<p>Run <code>git rm --cached path_to_submodule</code> (no trailing slash).In my case it was <code>git rm --cached themes/Papermod</code></p>
</li>
<li>
<p>Run <code>rm -rf .git/modules/path_to_submodule</code> (no trailing slash).</p>
</li>
<li>
<p>Commit <code>git commit -m “Removed submodule ”</code></p>
</li>
<li>
<p>Delete the now untracked submodule files <code>rm -rf path_to_submodule</code></p>
</li>
</ul>
<p>This removed my git submodules entries.
And then again created a submodule entry with my usernameAnd that&rsquo;s how the git submodule error was solved.
**</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt TIL: jq</title>
      <link>https://codeklutz.com/posts/today-i-learnt-til-jq/</link>
      <pubDate>Thu, 22 Dec 2022 21:45:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-til-jq/</guid>
      <description>Today at work once again I had to inspect a json body which was not beautified. Normally I turn to Postman and use the beautify option. But my mac cried and was freezing in instances begging for me to not open more application :( This is where I came across a nifty tool called jq
jq is a lightweight and flexible command-line JSON processor. It is like sed for JSON data.</description>
      <content:encoded><![CDATA[<p>Today at work once again I had to inspect a json body which was not beautified. Normally I turn to Postman and use the beautify option.
But my mac cried and was freezing in instances begging for me to not open more application :(
This is where I came across a nifty tool called  <strong><strong>jq</strong></strong></p>
<p>jq is a lightweight and flexible command-line JSON processor. It is like sed for JSON data. It can used to transform json data into more readableformat.
For example :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">  <span class="err">❯</span> <span class="err">echo</span>  <span class="err">&#39;</span><span class="p">{</span><span class="nt">&#34;fullName&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;firstName&#34;</span><span class="p">:</span> <span class="s2">&#34;Bruce&#34;</span><span class="p">,</span><span class="nt">&#34;middleName&#34;</span><span class="p">:</span> <span class="s2">&#34;Clark&#34;</span><span class="p">,</span> <span class="nt">&#34;lastName&#34;</span><span class="p">:</span> <span class="s2">&#34;Wayne&#34;</span> <span class="p">}}</span><span class="err">&#39;</span> <span class="err">|</span> <span class="err">jq</span> <span class="err">.</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;fullName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;firstName&#34;</span><span class="p">:</span> <span class="s2">&#34;Bruce&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;middleName&#34;</span><span class="p">:</span> <span class="s2">&#34;Clark&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;lastName&#34;</span><span class="p">:</span> <span class="s2">&#34;Wayne&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="where-and-why-would-you-use-it">Where and why would you use it?</h2>
<p>There are a few reasons I could think of why I would use jq regularly:</p>
<!-- raw HTML omitted -->
<ul>
<li>Similarly like my situation above, if you want to avoid opening gui apps or online code beautifiers ,this is a great option.</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Once can prettify a curl output with jq.</p>
<p>This is a great option when you pretty json output on the go for example <code>healthcheck</code> urls of your application apis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">curl</span> <span class="err">http:</span><span class="c1">//example-api-url-you-are-calling.com | jq .
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">curl</span> <span class="err">http:</span><span class="c1">//example-api-healthcheck.com/healthcheck | jq .
</span></span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>jq is ubiquitous means it is pre-installed in most machines (even cloud vms such as aws and microsoft vms).</p>
<p>So next time you want pretty output of a json which is present in an ec2 instance.
You dont need to do the manual work of copy and paste and json and figuring it out later.</p>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Also I think its pretty secure than the online third party websites developers tend to use to prettify json ,xml while working. Especially when dealing with secret private data which is sometimes pasted on to a random code beautifier website.</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>And pretty handy when you lose internet connection ;)</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>When used in shell scripts , it can save a lot of time and manual effort.</p>
<p>This is useful cheat sheet with good example to refer <a href="https://lzone.de/cheat-sheet/jq">https://lzone.de/cheat-sheet/jq</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt:422 HTTP Error code</title>
      <link>https://codeklutz.com/posts/today-i-learnt422-http-error-code/</link>
      <pubDate>Tue, 20 Dec 2022 19:17:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt422-http-error-code/</guid>
      <description>Today while testing a soap API at work, I came across this HTTP error code called HTTP/1.1 422 Unprocessable Entity . According to MDN Web docs, it means the following :
The HyperText Transfer Protocol (HTTP) 422 Unprocessable Entity response status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.</description>
      <content:encoded><![CDATA[<p>Today while testing a soap API at work, I came across this HTTP error code called <strong><strong>HTTP/1.1 422 Unprocessable Entity</strong></strong> . According to MDN Web docs, it means the following :</p>
<blockquote>
<p>The HyperText Transfer Protocol (HTTP) 422 Unprocessable Entity response status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.</p>
</blockquote>
<p>It means that the syntax of the request is correct and well-formed but it has semantic, logical errors. Meaning the soap body xml format will be correct but the issue arises because of the content inside the XML tags*. In this case, it could be the following:</p>
<ul>
<li>Wrong character within the code.</li>
<li>The server doesn’t understand the content within a particular XML tag.</li>
<li>Or it refuses to process any other content inside the tag other than a fixed decided value).</li>
</ul>
<p>Difference between 422,404 and 415 Error codes .Permalink
According to <a href="https://www.rfc-editor.org/rfc/rfc4918#section-11.2">RFC</a>,</p>
<blockquote>
<p>The 422 (Unprocessable Entity) status code means the server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions. For example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but semantically erroneous, XML instructions.</p>
</blockquote>
<p>In testing a soap API, the content type of the request body was correct. I checked for Content-Type header while testing) – Hence 415(Unsupported Media Type) was not valid. For soap,it was Content-Type: text/xml; charset=UTF-8. And the syntax of the request body was also correct– Hence 404(Bad request) was not valid.</p>
<p>The error occurred due to an incorrect value in the XML tag in my case. Value should have been <code>&lt;ns8:exampleTag&gt;123&lt;/ns8:exampleTag&gt;</code> instead of <code>&lt;ns8:exampleTag&gt;456&lt;/ns8:exampleTag&gt;</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt (TIL): jq</title>
      <link>https://codeklutz.com/posts/til-jq/</link>
      <pubDate>Tue, 20 Dec 2022 21:24:00 +0530</pubDate>
      
      <guid>https://codeklutz.com/posts/til-jq/</guid>
      <description>Today at work once again I had to inspect a json body which was not beautified. Normally I turn to Postman and use the beautify option. But my mac cried and was freezing in instances begging for me to not open more application :( This is where I came across a nifty tool called jq
jq is a lightweight and flexible command-line JSON processor. It is like sed for JSON data.</description>
      <content:encoded><![CDATA[<p>Today at work once again I had to inspect a json body which was not beautified. Normally I turn to Postman and use the beautify option.
But my mac cried and was freezing in instances begging for me to not open more application :(
This is where I came across a nifty tool called  <strong><strong>jq</strong></strong></p>
<p>jq is a lightweight and flexible command-line JSON processor. It is like sed for JSON data. It can used to transform json data into more readableformat.
For example :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">         <span class="err">❯</span> <span class="err">echo</span>  <span class="err">&#39;</span><span class="p">{</span><span class="nt">&#34;fullName&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;firstName&#34;</span><span class="p">:</span> <span class="s2">&#34;Bruce&#34;</span><span class="p">,</span><span class="nt">&#34;middleName&#34;</span><span class="p">:</span> <span class="s2">&#34;Clark&#34;</span><span class="p">,</span> <span class="nt">&#34;lastName&#34;</span><span class="p">:</span> <span class="s2">&#34;Wayne&#34;</span> <span class="p">}}</span><span class="err">&#39;</span> <span class="err">|</span> <span class="err">jq</span> <span class="err">.</span>
</span></span><span class="line"><span class="cl">       <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;fullName&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&#34;firstName&#34;</span><span class="p">:</span> <span class="s2">&#34;Bruce&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&#34;middleName&#34;</span><span class="p">:</span> <span class="s2">&#34;Clark&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&#34;lastName&#34;</span><span class="p">:</span> <span class="s2">&#34;Wayne&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span></code></pre></div><h2 id="where-and-why-would-you-use-it">Where and why would you use it?</h2>
<p>There are a few reasons I could think of why I would use jq regularly:</p>
<!-- raw HTML omitted -->
<ul>
<li>Similarly like my situation above, if you want to avoid opening gui apps or online code beautifiers ,this is a great option.</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Once can prettify a curl output with jq.</p>
<p>This is a great option when you pretty json output on the go for example <code>healthcheck</code> urls of your application apis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">        <span class="err">curl</span> <span class="err">http:</span><span class="c1">//example-api-url-you-are-calling.com | jq .
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="err">curl</span> <span class="err">http:</span><span class="c1">//example-api-healthcheck.com/healthcheck | jq .
</span></span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>jq is ubiquitous means it is pre-installed in most machines (even cloud vms such as aws and microsoft vms).</p>
<p>So next time you want pretty output of a json which is present in an ec2 instance.
You dont need to do the manual work of copy and paste and json and figuring it out later.</p>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Also I think its pretty secure than the online third party websites developers tend to use to prettify json ,xml while working. Especially when dealing with secret private data which is sometimes pasted on to a random code beautifier website.</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>And pretty handy when you lose internet connection ;)</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>When used in shell scripts , it can save a lot of time and manual effort.</p>
<p>This is useful cheat sheet with good example to refer <a href="https://lzone.de/cheat-sheet/jq">https://lzone.de/cheat-sheet/jq</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt: Interesting Things in Java 11</title>
      <link>https://codeklutz.com/posts/today-i-learnt-interesting-things-in-java-11/</link>
      <pubDate>Sun, 20 Nov 2022 18:48:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-interesting-things-in-java-11/</guid>
      <description>I came across a fascinating Java talk on youtube by Devoxx 2022 Hanno Embregts. This article is about a few java snippets I encountered. The purpose of today’s TIL is to have a list of interesting things we could do in Java and not deep dive into each concept.
Today’s TIL : Crazy things to do with Java 11+
Initializing Array and var keywordPermalink Having the var keyword in a statically typed language such as Java was fascinating in itself(an article on this in the future :).</description>
      <content:encoded><![CDATA[<p>I came across a fascinating Java talk on youtube by Devoxx 2022 Hanno Embregts. This article is about a few java snippets I encountered. The purpose of today’s TIL is to have a list of interesting things we could do in Java and not deep dive into each concept.</p>
<p>Today’s TIL : <strong><strong>Crazy things to do with Java 11+</strong></strong></p>
<h2 id="initializing-array-and-var-keywordpermalink">Initializing Array and var keywordPermalink</h2>
<p>Having the <code>var</code> keyword in a statically typed language such as Java was fascinating in itself(an article on this in the future :). But we never thought we would use it to initialize such as</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">var</span> <span class="n">element</span> <span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>       <span class="c1">//WORKS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">var</span> <span class="o">[]</span> <span class="n">element</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>      <span class="c1">// COMPILE ERROR :error: &#39;var&#39; is not allowed as an element type of an array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Since</span> <span class="n">var</span> <span class="n">is</span> <span class="n">a</span> <span class="n">generic</span> <span class="n">element</span> <span class="n">type</span><span class="o">,</span> <span class="n">giving</span> <span class="n">it</span> <span class="n">array</span> <span class="o">[]</span> <span class="n">provides</span> <span class="n">an</span> <span class="n">error</span> <span class="n">since</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">being</span> <span class="n">generic</span> <span class="n">we</span> <span class="n">are</span> <span class="n">giving</span> <span class="n">it</span> <span class="n">an</span> <span class="n">array</span> <span class="n">type</span><span class="o">.</span>
</span></span></code></pre></div><h2 id="c-style-arraypermalink">C style ArrayPermalink</h2>
<p>What is a c style array? Java supports providing [] before and after the variable name in an array</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">[]</span><span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">arr1</span><span class="o">[]=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span></span></code></pre></div><p>In C style array, we provide [] after the variable name that is ~int arr1[].</p>
<p>So in Java, suppose we have the following code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">arr1</span><span class="o">[],</span><span class="n">arr2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">arr1</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl"><span class="n">arr2</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>        <span class="c1">//COMPILE ERROR : error: incompatible types: int[] cannot be converted to int
</span></span></span></code></pre></div><p>The above code will result in COMPILE ERROR for arr2 since arr2 is not an array but a primitive int variable. But if we want to want both arr1 and arr12 as array type we need to change the declaration to</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">[]</span> <span class="n">arr1</span><span class="o">,</span><span class="n">arr2</span><span class="o">;</span> <span class="c1">//Notice how [] are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">arr1</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl"><span class="n">arr2</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span></span></code></pre></div><h2 id="arrays-dot-aslist-and-primitives">Arrays.asList and Primitives</h2>
<p>Let’s look at the following example :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="o">[]</span> <span class="n">strArr</span><span class="o">={</span><span class="s">&#34;one&#34;</span><span class="o">,</span><span class="s">&#34;two&#34;</span><span class="o">,</span><span class="s">&#34;three&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">stringList</span><span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">strArr</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">[]</span> <span class="n">intArray</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">var</span> <span class="n">intList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">intArray</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stringList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;one&#34;</span><span class="o">)+</span><span class="s">&#34; &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">intList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="nl">
</span></span></span><span class="line"><span class="cl"><span class="nl">Output:</span> <span class="kc">true</span> <span class="kc">false</span>
</span></span></code></pre></div><p>Signature of Arrays.asList is var-args or List of T’s.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">asList</span><span class="o">(</span><span class="n">T</span><span class="o">...</span> <span class="n">a</span><span class="o">)</span>
</span></span></code></pre></div><p>T is of generic type so that means it needs to reference a Type such as Integer,Float and not reference Array of Ints</p>
<p>But next question is Can they boxed ? (Autoboxing: Converting primitive to Class Type example : int -&gt; Integer) Answer is no Array of ints -&gt; Cannot be boxed -&gt; Array of Integer</p>
<blockquote>
<p>Don’t use Arrays.asList on primitives</p>
</blockquote>
<h2 id="no-structural-changes-allowed-in-arraypermalink">No structural changes allowed in ArrayPermalink</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="o">[]</span> <span class="n">ints</span> <span class="o">={</span><span class="s">&#34;a&#34;</span><span class="o">,</span><span class="s">&#34;b&#34;</span><span class="o">,</span><span class="s">&#34;c&#34;</span><span class="o">,</span><span class="kc">null</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">strings</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">Objects</span> <span class="o">::</span> <span class="n">isNull</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="nl">Output:</span> <span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="err">“</span><span class="n">main</span><span class="err">”</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">UnsupportedOperationException</span><span class="o">:</span> <span class="n">remove</span> <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">Iterator</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">102</span><span class="o">)</span>
</span></span></code></pre></div><p>Because the array does not allow any structural changes to it</p>
<h2 id="a-unique-way-to-remove-null-values-from-map">A Unique way to remove null values from Map</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span> <span class="c1">//currently map has key:4 value: null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="s">&#34;four&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="s">&#34;four&#34;</span><span class="o">);</span>     <span class="c1">//key key:4 value:four
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="nl">
</span></span></span><span class="line"><span class="cl"><span class="nl">Output:</span> <span class="kc">null</span><span class="o">,</span><span class="n">four</span>
</span></span></code></pre></div><p>##</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">numbers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">number</span><span class="o">-&gt;</span> <span class="n">map</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">number</span><span class="o">,</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;())</span>
</span></span><span class="line"><span class="cl">	       <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="nl">
</span></span></span><span class="line"><span class="cl"><span class="nl">Output:</span> <span class="n">NullPointerException</span><span class="o">:</span> <span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="err">“</span><span class="n">main</span><span class="err">”</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span> <span class="n">at</span> <span class="n">HelloWorld</span><span class="o">.</span><span class="na">lambda$main$0</span><span class="o">(</span><span class="n">HelloWorld</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">33</span><span class="o">)</span>
</span></span></code></pre></div><p>Because map.putIfAbsent returns null if no value is present</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Today I learnt: Database Version Control</title>
      <link>https://codeklutz.com/posts/today-i-learnt-database-version-control/</link>
      <pubDate>Mon, 07 Nov 2022 15:49:00 +0000</pubDate>
      
      <guid>https://codeklutz.com/posts/today-i-learnt-database-version-control/</guid>
      <description>Upon stumbling upon this motivating HN post by Simon Willison I have been inspired to start a Today I learnt(TIL) series of my own. This seems like a doable promising idea where I do not have the self-imposed pressure of researching for a blog idea and making a seperate time to write that specific post. Wrting this TIL flows naturally in day-to-day work flow where I could just say “Hey I just learnt about this XYZ ,I should write about it”.</description>
      <content:encoded><![CDATA[<p>Upon stumbling upon this motivating HN post by <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">Simon Willison</a> I have been inspired to start a Today I learnt(TIL) series of my own. This seems like a doable promising idea where I do not have the self-imposed pressure of researching for a blog idea and making a seperate time to write that specific post. Wrting this TIL flows naturally in day-to-day work flow where I could just say “Hey I just learnt about this XYZ ,I should write about it”.</p>
<p>Starting with Today’s TIL : <strong><strong>Database Version Control</strong></strong></p>
<p>What it is : A practice or form of maintining and tracking every change made to database schema, just like git version control(But this is specifically for Database). It acts like a single source of truth (like a git code repository)</p>
<p>This concept solves a lot of problems we face as developers such as :</p>
<p>As a developer,One must have faced a situation where to solve a particular problem statement or feature , you need to do database changes,however for those changes to reflect application needs to be restarted or you might have database and application code changes, an organization already has some processes defined for deployment. In development phase, one usually runs the db changes or sql queries in local generally via a sql client application.For example,Update some existing db property.</p>
<p>But for that same change to be reflected in production db, CICD processes are define fdd for deployment or a seperate team might be responsible for deployment altogether.Hence we cant expect a seperate db team to always be in sync with deployment team or that particular CICD process. Hence, DB schema changes should be deployed as a part of application code changes.</p>
<p>This is where database version control comes in handy where :</p>
<p>You need traceability and a commit history of db schema changes done before.
Protect prodcution database tables from unwanted or uncontrolled changes
Help in communication between teams regarding data(where a member can look at the query and provide feedback as a part of Pull request)
Applications such as liquidbase,flyway scripts come in handy Speaking of liquibase which works on changelog concept where you have</p>
<blockquote>
<p>A Changelog file which inside has -&gt; ChangeSet (which are used to define Db changes)- &gt; Which can include SQL Queries and Rollback queries if the changes dont work in that specific environment.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;databaseChangeLog</span>
</span></span><span class="line"><span class="cl">      <span class="na">xmlns=</span><span class="s">&#34;http://www.liquibase.org/xml/ns/dbchangelog&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">xmlns:ext=</span><span class="s">&#34;http://www.liquibase.org/xml/ns/dbchangelog-ext&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">xmlns:pro=</span><span class="s">&#34;http://www.liquibase.org/xml/ns/pro&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.liquibase.org/xml/ns/dbchangelog
</span></span></span><span class="line"><span class="cl"><span class="s">	      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd
</span></span></span><span class="line"><span class="cl"><span class="s">	      http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
</span></span></span><span class="line"><span class="cl"><span class="s">	      http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-latest.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="nt">&lt;changeSet</span>  <span class="na">id=</span><span class="s">&#34;1&#34;</span>  <span class="na">author=</span><span class="s">&#34;XYZ&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;comment&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/comment&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;sql&gt;</span>
</span></span><span class="line"><span class="cl">	INSERT INTO Exampledb.exampletable(&#39;id&#39;,&#39;name,&#39;serial&#39;)
</span></span><span class="line"><span class="cl">	VALUES(&#34;1&#34;,&#34;test&#34;,&#34;serial&#34;);
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/sql&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;rollback&gt;</span>
</span></span><span class="line"><span class="cl">	DELETE FROM  Exampledb.exampletable where id=&#34;1&#34;;
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;/rollback&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></span></code></pre></div><p>This changelog file needs to be included in a master changelog file which consists a list of all change log files (Similar to how a git commit history consists of all commit ids)</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
