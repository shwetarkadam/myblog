[{"content":"I deployed my portfolio site and wanted to try out github actions and this is my experience of automating the deployment. This article is more focused on how you can use the GitHub actions and how easy it is to deploy your code to GitHub pages rather than the portfolio site code.So every time you make an update or build to your website ,the changes are automatically reflected and this automated deploying process makes work much faster.\nThe way GitHub action works is you create actions in your repositories by creating one or more yaml files and these are called workflows.Workflows now can handle build tasks like CI CD. This means you use the action to test your code and push the site to the desired hosting platform (in this case GitHub pages ) when the main branch changes . First step assuming that you have a GitHub account is to create a repository having your website code in it.Now I have a bootstrap website but in the future I do plan on adding node JS so I already added package.json.\n{% gist 7fc9e560ec958d6fb9876019e298e02f %}\n{ \u0026#34;name\u0026#34;: \u0026#34;shwetarkadam.github.io\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Portfolio\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.html\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;npm run clean \u0026amp;\u0026amp; npm run imagemin \u0026amp;\u0026amp; npm run copyfonts \u0026amp;\u0026amp; npm run copydata \u0026amp;\u0026amp; npm run usemin\u0026#34;, \u0026#34;clean\u0026#34;: \u0026#34;rimraf dist\u0026#34;, \u0026#34;copyfonts\u0026#34;: \u0026#34;copyfiles -f node_modules/font-awesome/fonts/* dist/fonts\u0026#34;, \u0026#34;copydata\u0026#34;: \u0026#34;copyfiles -f src/js/* dist/js\u0026#34;, \u0026#34;imagemin\u0026#34;: \u0026#34;imagemin src/img/* -o dist/img\u0026#34;, \u0026#34;lite\u0026#34;: \u0026#34;lite-server\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;npm run lite\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;usemin\u0026#34;: \u0026#34;usemin index.html -d dist --htmlmin -o dist/index.html\u0026#34; }, \u0026#34;repository\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;git@github.com:shwetarkadam/portfolio.git\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;Shweta Kadam\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;bootstrap\u0026#34;: \u0026#34;^4.4.1\u0026#34;, \u0026#34;font-awesome\u0026#34;: \u0026#34;^4.7.0\u0026#34;, \u0026#34;jquery\u0026#34;: \u0026#34;^3.5.1\u0026#34;, \u0026#34;popper.js\u0026#34;: \u0026#34;^1.16.0\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;copyfiles\u0026#34;: \u0026#34;^2.2.0\u0026#34;, \u0026#34;imagemin-cli\u0026#34;: \u0026#34;^5.1.0\u0026#34;, \u0026#34;lite-server\u0026#34;: \u0026#34;^2.5.4\u0026#34;, \u0026#34;rimraf\u0026#34;: \u0026#34;^3.0.2\u0026#34;, \u0026#34;usemin-cli\u0026#34;: \u0026#34;^0.6.0\u0026#34; } } Verify all your changes as correct by first in your root folder running the command:\nnpm install npm install\nand after installing node modules run the command:\nrun npm start so you should get your output in localhost something like this\nNow that you have ensured that the project runs properly in your local machine,it is ready to be deployed to GitHub pages. You will only need to commit and push your changes to the main branch of a repo and ensure that the settings are pointing to the correct branch to display a site for that. Now the file that does this is that deploy.yml file which we will use to create the workflow.\nname: Build and Deploy on: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: persist-credentials: false - name: Install and Build run: | npm install npm run build - name: Deploy uses: JamesIves/github-pages-deploy-action@releases/v3 with: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} BRANCH: gh-pages FOLDER: dist Now this yaml file which can be found .github/workflows/deploy.yml file in local ,you can rename the file whatever you like.It tells the github actions to install the project dependencies run a build script and put that required files in a output folder name dist and upload the contents of the dist folder to the gh-pages branch and if the branch does not exist it will create that branch.The workflow to deploy the site to github-pages you can find that from James Ives GitHub pages deploy action. If you have any existing site or code and you want to publish it to get pages you only need this file to be added into your project. You could go to your github repo Actions Tab -\u0026gt; Create Simple Workflow and copy paste the above content in your yaml file.\nOnce you have a site ready for GitHub Pages, and your project includes the .github/workflows/deploy.yml file, you only need to commit and push your changes to the main branch of your repository. You can the ongoing workflow by going to Actions=\u0026gt;build and deploy.Also this is the place where you can debug what went wrong in case your workflow fails.\nAfter the GitHub Actions have run, ensure settings are pointing to the correct branch to display your site. Go to the settings of your repository and ensure that the source for GitHub Pages is using the correct branch. It is close to the bottom of the main settings page.\nIt does take some time at the start to load in the browser but once available you can click on the link in the green bar above. Now every time you make a push to the main branch ,the changes are reflected in the main site.\nMy Portfolio Site: Click Here\nThat’s all folks. Happy Learning.\n","permalink":"https://codeklutz.com/posts/deploying-my-portfolio-website-for-free-on-github-pages-using-github-actions/","summary":"I deployed my portfolio site and wanted to try out github actions and this is my experience of automating the deployment. This article is more focused on how you can use the GitHub actions and how easy it is to deploy your code to GitHub pages rather than the portfolio site code.So every time you make an update or build to your website ,the changes are automatically reflected and this automated deploying process makes work much faster.","title":"Deploying my portfolio website for free on Github Pages using GitHub actions"},{"content":"Just revisiting and explaining myself Polymorphism concept here through a blog post. The words Polymorphism means multiple forms.\nIn Java ,Polymorphism means multiple forms of an object. We shall divide this article into 3 sections.\n1.Syntax\n2.Calling a variable polymorphically.\n3.Calling a method polymorphically.\n1.SyntaxPermalink Now in polymorphism in Java, the thumb key rule to remember is\nsuper = subPermalink Meaning the variable reference (LHS) must always be a super class reference and the object initialization(RHS) must a sub class.\nFor Example: class A{\n} class B extends A{ } class C extends B{ } class D extends A{ }\nSo valid and invalid syntax according to the thumb rule will be\nA a =new B(); //VALID B b=new D(); //NOT VALID C c=new A(); //VALID A a1=new D(); //VALID 2.Calling a variable polymorphically.Permalink If a variable is called from a polymorphic object,we follow the reference i.e. the super class. And if the variable is not present in the super class ,it results in a COMPILE ERROR. EG:\nclass A{ int x=5; } class B extends A{ int x=10; } class App{ public static void main(String[]args){ A a=new B(); System.out.println(a.x); //What do u think is the output class A x value (5)or class B x value(10)?Follow the rule. } } OUTPUT: 5 Calling a method polymorphically.Permalink If a method is called from a polymorphic object ,we follow a 2 step procedure: 1.We got to the super class and check whther the method is present or not.\nif(present) Goto to step 2 else COMPILE ERROR 2.Come to the sub class and check wther the method is overrided or not.\nif(overrided) Call the sub-class version else Call the super -class version. Eg:\nclass A{ void m1(){ System.out.println(\u0026#34;A\u0026#34;); }} class B extends A{ void m1(){ System.out.println(\u0026#34;B\u0026#34;); }} class App{ public static void main(String[]args){ A a=new B(); a.m1(); //Follow the rule B=new B(); b.m1(); //Normal sub class object method call }} OUTPUT: B B So that’s all for polymorphism in java.\nHappy Learning :)\n","permalink":"https://codeklutz.com/posts/polymorphism-in-java/","summary":"Just revisiting and explaining myself Polymorphism concept here through a blog post. The words Polymorphism means multiple forms.\nIn Java ,Polymorphism means multiple forms of an object. We shall divide this article into 3 sections.\n1.Syntax\n2.Calling a variable polymorphically.\n3.Calling a method polymorphically.\n1.SyntaxPermalink Now in polymorphism in Java, the thumb key rule to remember is\nsuper = subPermalink Meaning the variable reference (LHS) must always be a super class reference and the object initialization(RHS) must a sub class.","title":"Polymorphism in Java"}]